<html><!-- строчка рекламы by.ru -->
<script language="JavaScript" type="text/javascript" src="../../../more.by.ru/up/up.js-780307968" tppabs="http://more.by.ru/up/up.js?780307968"></script>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<!--
This document was converted from RTF source: 
By rtftohtml 4.17
See http://www.sunpack.com/RTF
Filename:HardDrive:Desktop Folder:0672315947:emacs.rtf
Application Directory:HardDrive:Desktop Folders:Converters:ERL-SEU(4.17):r2h
Subject:
Author:enduser
Operator:End User
Document Comments:
Version Comments:
Comments:
Keywords:
Translation Date:08/11/1999
Translation Time:22:05:04
Translation Platform:MacOS
Number of Output files:226
This File:HardDrive:Desktop Folder:0672315947:emacs157.htm
SplitDepth=2
SkipNavPanel=1
SkipLeadingToc=0
SkipTrailingToc=1
GenContents=1
GenFrames=0
GenIndex=1
-->
<HEAD lang="en"><LINK rel="stylesheet" href="graphics/pkbstyle.css" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/pkbstyle.css">
<META NAME="CATEGORY" CONTENT="0672315947">
<META NAME="BOOKTITLE" CONTENT="Sams Teach Yourself Emacs in 24 Hours">
<TITLE>Hour 18: Editing C, C++, and Java Files: Automatic Indentation</TITLE>




<!--Begin Popup Script-->
<SCRIPT LANGUAGE="JavaScript">
<!--
function popUp(pPage) {
 figLoc = '' + document.location;
 if (figLoc.indexOf('/') == -1 && figLoc.indexOf('\\') >= 0) {
   slash = '\\';
 } else {
   slash = '/';
 }
 openLoc = figLoc.substring(0, figLoc.lastIndexOf(slash) + 1);
 while (pPage.substring(0,3) == '../') {
   openLoc = openLoc.substring(0, openLoc.lastIndexOf(slash, openLoc.length - 2) + 1);
   pPage = pPage.substring(3, pPage.length + 1);
 }
 popUpWin = window.open('','popWin','resizable=1,scrollbars=1,location=0,toolbar=0,width=525,height=394');
 figDoc = popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + openLoc + pPage + '">';
 zhtm += '<P><B>' + pPage.substring(pPage.lastIndexOf('/') + 1, pPage.length) + '</B> ';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
}
// modified 3.1.99 RWE v4.1 -->
</SCRIPT>

<!--End Popup Script--></HEAD>

<BODY bgcolor=#FFFFFF >
<TABLE border="0" width="99%" cellspacing="0" cellpadding="3">
  <TR> 
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif"  bgcolor="#666699"> 
      <P> <FONT color="#FFFFFF"><B>Sams Teach Yourself Emacs<FONT size="1"></FONT> 
        in 24 Hours</B> </FONT></P>
    </TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699"><FONT size="2"><IMG src="../style/dot.gif" tppabs="http://freebooks.by.ru/view/style/dot.gif" width="10" height="1"></FONT></TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699" nowrap align="right"> 
      <P><A href="index.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/index.htm"><FONT size="2" color="#FFFFFF">Contents</FONT></A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="bkindex.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/bkindex.htm"><FONT size="2" color="#FFFFFF">Index</FONT></A></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#AAAAAA" height="16"> 
      <P><FONT size="2">Hour 18: Editing C, C++, and Java Files</FONT></P>
    </TD>
    <TD bgcolor="#AAAAAA" height="16"><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
    <TD bgcolor="#AAAAAA" height="16" align="right" nowrap> 
      <P><FONT size="2"><A href="emacs147.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs147.htm"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Hour</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs165.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs165.htm">Next 
        Hour<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#DDDDDD"> 
      <TABLE border="0" cellspacing="0" cellpadding="0" dwcopytype="CopyTableRow">
        <TR valign="top"> 
          <TD> 
            <P></P>
            <P><FONT size="2">Sections in this Hour:</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs156.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs156.htm#c1">Advanced 
              C-Based Language Editing</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs160.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs160.htm">File and 
              Tag Browsing</A> </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1">Automatic Indentation</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs161.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs161.htm">Summary</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs158.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs158.htm">Navigating 
              C Preprocessor Directives</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs162.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs162.htm">Q&amp;A</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs159.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs159.htm">Viewing 
              Code with Expanded Macros</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs163.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs163.htm">Exercises</A> 
              </FONT></P>
          </TD>
        </TR>
      </TABLE>
    </TD>
    <TD bgcolor="#DDDDDD">&nbsp;</TD>
    <TD bgcolor="#DDDDDD" align="right" nowrap valign="bottom"> 
      <P class="navigation"><FONT size="2"><A href="emacs156.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs156.htm#c1"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Section</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs158.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs158.htm">Next 
        Section<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
</TABLE>
<H2><A name="c1"></A> Automatic Indentation </H2>
<TABLE border="0" cellspacing="0" cellpadding="0">
  <TR valign="top"> 
    <TD> 
      <P class="navigation"><FONT size="1"><A href="#Heading366">Indenting with 
        Style</A></FONT></P>
    </TD>
  </TR>
  <TR valign="top"> 
    <TD> 
      <P class="navigation"><FONT size="1"><A href="#Heading367">Proactive Editing</A></FONT></P>
    </TD>
  </TR>
  <TR valign="top"> 
    <TD> 
      <P class="navigation"><FONT size="1"><A href="#Heading368">Comment Acceleration</A></FONT></P>
    </TD>
  </TR>
</TABLE>
<BR>
<P><FONT size=2>One
of the most powerful features of Emacs while editing C-based languages<A name="Index7110"></A><A name="Index7111"></A><A name="Index7112"></A><A name="Index7113"></A>
is its capability to indent code by pressing Tab. This can be the most
distracting behavior for new Emacs users who have become accustomed to other
editors, but it is, by far, a huge time saver in the long run. You will find
that complete control over indentation is allowed so if the default style is
unappealing or incorrect for your situation, it can<A name="Index7114"></A><A name="Index7115"></A><A name="Index7116"></A><A name="Index7117"></A>
be adjusted to suit your needs.
</FONT></P><P><FONT size=2>To
start with, load up a file in C, C++, Objective C, or Java. Start at the
beginning of a function or other element and press Tab. Continue pressing Tab
on each line afterward. You will find that not only does it not matter where
the cursor is on the line, but the line chooses a location and stays there
instead of continually adding more spaces before the text. Try changing the
indentation of the line by deleting or adding spaces at the beginning of the
line, and press Tab again. The line <A name="Index7118"></A><A name="Index7119"></A><A name="Index7120"></A><A name="Index7121"></A><A name="Index7122"></A><A name="Index7123"></A><A name="Index7124"></A>shifts
back to its desired location.
</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialgreen">Tip -</B>
The
first concern with automatic indentation is how to insert <A name="Index7125"></A><A name="Index7126"></A><A name="Index7127"></A><A name="Index7128"></A>a
Tab character when Tab is behaving in a nontraditional fashion. You can insert
a Tab at any time by pressing 
<SPAN class=compcode>C-q</SPAN>
first, which will quote the next keystroke in directly. If you are entering a
string literal, you should always use the 
<SPAN class=compcode>\t</SPAN>
character modifier instead of a literal Tab <A name="Index7129"></A><A name="Index7130"></A><A name="Index7131"></A><A name="Index7132"></A>character.</FONT></P></TD></TR></TABLE><BR>
<P><FONT size=2>I
hope that you <A name="Index7133"></A><A name="Index7134"></A><A name="Index7135"></A><A name="Index7136"></A>have
now decided that this is the one true way of indenting and you&#039;re ready to
move on to some serious code formatting. A common situation would be to wrap a
block of code in a conditional, which requires indenting all lines that are
wrapped. Although that is certainly simple to do with the Tab key, it is more
appropriate to use the indent region command<A name="Index7137"></A><A name="Index7138"></A><A name="Index7139"></A>
<SPAN class=compcode>C-M-\</SPAN>
instead. The indent region command is quite handy with the specialized mark
commands such as 
<SPAN class=compcode>C-M-SPC</SPAN>
(mark <A name="Index7140"></A><A name="Index7141"></A><A name="Index7142"></A>syntactic
expression), 
<SPAN class=compcode>C-M-h</SPAN>
<A name="Index7143"></A><A name="Index7144"></A><A name="Index7145"></A>(mark
function), or<A name="Index7146"></A><A name="Index7147"></A><A name="Index7148"></A>
<SPAN class=compcode>C-x
h
</SPAN>
(mark whole<A name="Index7149"></A><A name="Index7150"></A><A name="Index7151"></A><A name="Index7152"></A>
buffer).
</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialred">Caution -</B>
On
some Intel-based PCs, <A name="Index7153"></A><A name="Index7154"></A>Control-Alt-Spacebar
is the default keybinding for power-saving mode. This can be annoying at best;
on some systems, this causes a no-questions-asked reboot which is no fun at all.
</FONT></P></TD></TR></TABLE><BR>
<P><FONT size=2>There
are additional bindings available for indenting blocks of code <A name="Index7155"></A><A name="Index7156"></A><A name="Index7157"></A><A name="Index7158"></A>without
setting the mark. For example, if you want to reindent the contents of an 
<SPAN class=compcode>if</SPAN>
block, you can place the cursor before the opening 
<SPAN class=compcode>{</SPAN>
and press 
<SPAN class=compcode>C-M-q</SPAN>,
which indents the expression following the cursor. You can also use 
<SPAN class=compcode>C-c
C-q
</SPAN>
to indent all the lines in the current function.
</FONT></P><P><FONT size=2>So
look at how you can handle your example. In typical Emacs fashion there are
several ways to do it. To type this in logically, you&#039;d probably start at
the beginning of the code you need to<A name="Index7159"></A><A name="Index7160"></A><A name="Index7161"></A><A name="Index7162"></A>
conditionalize, and type
</FONT></P>

<PRE class="compcode"><FONT size=3>
<SPAN class=compcode>if(condition) {</SPAN>
</FONT></PRE>
<P><FONT size=2>You&#039;d
then want to go to the end of the code, and add in a 
<SPAN class=compcode>}</SPAN>
on a line by itself. This leaves all the old code indented incorrectly.
</FONT></P><P><FONT size=2>It
would certainly be easy to use 
<SPAN class=compcode>C-c
C-q
</SPAN>
to reindent the entire function you are in, but that could take a long time for
very long functions. It would also have been wise to leave a mark with 
<SPAN class=compcode>C-SPC</SPAN>
after typing the opening 
<SPAN class=compcode>{</SPAN>,
but you might have forgotten. You could always drop a mark, use backward
syntactic expression 
<SPAN class=compcode>C-M-b</SPAN>,
and use the indent region<A name="Index7163"></A><A name="Index7164"></A><A name="Index7165"></A><A name="Index7166"></A>
command. Of course, if you moved back to the beginning, you could use the
indent syntactic expression command 
<SPAN class=compcode>C-M-q</SPAN>.
As it turns out, the fastest way to do this without moving the cursor is to use
the mark syntactic expression command with a negative argument and use indent
region. As you learned earlier, 
<SPAN class=compcode>C-u
-
</SPAN>
and 
<SPAN class=compcode>C-M--</SPAN>
are roughly equivalent in providing a negative argument. Next, 
<SPAN class=compcode>C-M-SPC</SPAN>
marks the block of code you entered. Now you can use indent region with 
<SPAN class=compcode>C-M-\</SPAN>
and everything<A name="Index7167"></A><A name="Index7168"></A><A name="Index7169"></A><A name="Index7170"></A>
is as you want it. 
</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialgreen">Tip -</B>
If
you want to force very large amounts of code to be indented in a known amount,
the rigid indentation function can be much faster. Try 
<SPAN class=compcode>C-x
Tab
</SPAN>
on a region<A name="Index7171"></A><A name="Index7172"></A><A name="Index7173"></A><A name="Index7174"></A>
with and without a universal argument to see how this works.
</FONT></P></TD></TR></TABLE>
<A name="Heading366"></A>
<H3>
Indenting
with Style
</H3>
<P><FONT size=2>Despite
the <A name="Index7175"></A><A name="Index7176"></A><A name="Index7177"></A><A name="Index7178"></A>rigid
indentation enforced while editing C-based language files, Emacs is not as
tyrannical as one might think. If the default GNU editing style is either not
to your liking or wrong due to corporate coding standards, you can change it to
your heart&#039;s content.
</FONT></P><P><FONT size=2>First,
you might want to try out some of the built-in styles. The set style command is
available with 
<SPAN class=compcode>C-c
.
</SPAN>
or with the extended command 
<SPAN class=compcode>M-x
c-set-style</SPAN>.
The most common styles are GNU, K&amp;R, and, of course, the Java style. Each
of these styles controls not only how individual commands are indented, but
also how braces, switch statements, and other elements are<A name="Index7179"></A><A name="Index7180"></A><A name="Index7181"></A><A name="Index7182"></A>
handled.
</FONT></P>
<P><FONT size=2>Chances are that your preferences are covered in the several styles 
  available by default. If your corporate environment demands a stringent pattern, 
  however, you might need to create your own indentation style. This requires 
  some work in your <SPAN class=compcode>.emacs</SPAN> initialization file. Please 
  refer to <A href="emacs206.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs206.htm">Hour 24, &quot;Installing Emacs Add-Ons,&quot;</A> 
  for details on writing Lisp if the upcoming section is unclear. </FONT></P>
<P><FONT size=2>The
easiest way to create your own style is to find a style that is as close to
what you want as you can find. This becomes the parent indentation style and
minimizes the amount of work you need to do. Next, track those elements you
don&#039;t like for reference. Are the braces spaced incorrectly between the
opening command, and enclosing statements? Are your K&amp;R function headers
indented too much? Emacs wants to <A name="Index7183"></A><A name="Index7184"></A><A name="Index7185"></A><A name="Index7186"></A>know.</FONT></P><P><FONT size=2>Next,
prepare to edit your configuration file found in 
<SPAN class=compcode>~/.emacs</SPAN>.
The command you add will look something like this:
</FONT></P>

<PRE class="compcode"><FONT size=3>
<SPAN class=compcode>(require &#039;cc-mode) </SPAN>
<SPAN class=compcode>(c-add-style &quot;my-style&quot; </SPAN>
<SPAN class=compcode>         &#039;( &quot;parent style&quot; </SPAN>
<SPAN class=compcode>            ( variable . value ) </SPAN>
<SPAN class=compcode>            ( c-offsets-alist . </SPAN>
<SPAN class=compcode>            ( ( offset-name-1 . Offset ) </SPAN>
<SPAN class=compcode>              ( offset-name-2 . Offset ) ) ) </SPAN>
<SPAN class=compcode>          ) ) </SPAN>
</FONT></PRE>
<P><FONT size=2>The
text in the string 
<SPAN class=compcode>parent
style
</SPAN>
represents the style you found earlier while experimenting with the different
indentation types. Everything not specified in the following section will be
derived from this parent style saving you the time needed<A name="Index7187"></A><A name="Index7188"></A><A name="Index7189"></A><A name="Index7190"></A>
to enter it into your 
<SPAN class=compcode>.emacs</SPAN>
file.
</FONT></P>
<P><FONT size=2>All the elements in the list following the parent style is called 
  an <I>alist</I>, which is short for <I>a</I>ssociation <I>list</I>. Each element 
  of an alist is a <I>dotted pair </I>, meaning that it is a list with two elements 
  of the form (<SPAN class=compcode>KEY . DATA</SPAN>). <SPAN class=compcode>KEY</SPAN> 
  is some name used as reference, and <SPAN class=compcode>DATA</SPAN> is the 
  data associated with it. The key element of each association is a variable name, 
  and its data is the value it will take. The variable <SPAN class=compcode>c-offsets-alist</SPAN> 
  is an alist describing how the language should be indented. The key is a symbol 
  describing the syntactic content of the current C line. The data element of 
  each association is <A name="Index7191"></A><A name="Index7192"></A><A name="Index7193"></A><A name="Index7194"></A>how 
  much to indent when this item is found. </FONT></P>
<P><FONT size=2>Some
common variables to set in your style are the following:
</FONT></P>
<UL>
<LI><P><FONT size=2>		<SPAN class=compcode>c-basic-offset</SPAN>--The
smallest unit of indentation in your style
</FONT></P></LI><P></P><LI><P><FONT size=2>		<SPAN class=compcode>c-backslash-column</SPAN>--When
adding 
<SPAN class=compcode>\</SPAN>
characters to long macros, the desired column
</FONT></P></LI><P></P><LI><P><FONT size=2>		<SPAN class=compcode>c-offsets-alist</SPAN>--The
alist of symbols representing a C-based language&#039;s syntax, and the offsets
associated with<A name="Index7195"></A><A name="Index7196"></A><A name="Index7197"></A><A name="Index7198"></A>
each
</FONT></P></LI></UL><P></P><TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialred">Caution -</B>
All
variables available in a style specification are also <A name="Index7199"></A><A name="Index7200"></A><A name="Index7201"></A><A name="Index7202"></A>available
as generic variables. This means you can use custom on them, or modify them
directly in your 
<SPAN class=compcode>.emacs</SPAN>
file. Any such customization is overridden by the style you create.
</FONT></P></TD></TR></TABLE><BR>
<P><FONT size=2>The
most important of these variables is most likely the 
<SPAN class=compcode>c-offsets-alist</SPAN>.
Each key for the C indent engine can be listed here, giving the ultimate
control of the indentation engine. Some common syntactic elements you might
want to change are the<A name="Index7203"></A><A name="Index7204"></A><A name="Index7205"></A><A name="Index7206"></A>
following:
</FONT></P>
<UL>
<LI><P><FONT size=2>		<SPAN class=compcode>statement</SPAN>--A
generic C command statement
</FONT></P></LI><P></P><LI><P><FONT size=2>		<SPAN class=compcode>statement-cont</SPAN>--Continuation
of a C statement that is longer than a single line
</FONT></P></LI><P></P><LI><P><FONT size=2>		<SPAN class=compcode>block-open</SPAN>--When
a code block unrelated to a control statement is started
</FONT></P></LI><P></P><LI><P><FONT size=2>		<SPAN class=compcode>substatement-open</SPAN>--A
code block below a control statement such as 
<SPAN class=compcode>if</SPAN>
or 
<SPAN class=compcode>for</SPAN></FONT></P></LI></UL><P></P><P><FONT size=2>There
are many more elements which you can access through Emacs&#039;s internal
documentation for the variable 
<SPAN class=compcode>c-offsets-alist</SPAN>.
You can <A name="Index7207"></A><A name="Index7208"></A><A name="Index7209"></A><A name="Index7210"></A>reference
this by using the help  command 
<SPAN class=compcode>C-h
v c-offsets-alist RET</SPAN>.</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialgreen">Tip -</B>
All
variables listed in a style can be accessed via Emacs&#039;s built-in help using 
<SPAN class=compcode>C-h
v</SPAN>,
and the names of all <A name="Index7211"></A><A name="Index7212"></A><A name="Index7213"></A><A name="Index7214"></A>the
useful ones start with 
<SPAN class=compcode>C-.</SPAN>
making it easy to find what you need. 
</FONT></P></TD></TR></TABLE><BR>
<P><FONT size=2>The
data element <A name="Index7215"></A><A name="Index7216"></A><A name="Index7217"></A><A name="Index7218"></A>for
each syntax type you specify can be a number, representing the number of
characters of indentation desired. If you want this element to line up under
the previous element, a 0 is appropriate. You can also specify data as the
symbol 
<SPAN class=compcode>+</SPAN>
or 
<SPAN class=compcode>-</SPAN>,
which specify one increment or decrement of 
<SPAN class=compcode>c-basic-offset</SPAN>.
<SPAN class=compcode>++</SPAN>
and 
<SPAN class=compcode>--</SPAN>
mean that many increments of 
<SPAN class=compcode>c-basic-offset</SPAN>.
<SPAN class=compcode>*</SPAN>
and 
<SPAN class=compcode>/</SPAN>
mean one half of 
<SPAN class=compcode>c-basic-offset</SPAN>.</FONT></P><P><FONT size=2>If
you need some syntactic element to always start at the first column, such as
macros, an offset isn&#039;t appropriate because you want to use a constant.
Unfortunately, the method of bringing text to the first column requires putting
in a very large negative number. This effectively backs up the indentation <A name="Index7219"></A><A name="Index7220"></A><A name="Index7221"></A><A name="Index7222"></A>until
it cannot get any smaller.
</FONT></P><P><FONT size=2>If
you are feeling exceptionally brave after finishing this book, you can also set
the data element of a statement to a function. This function is described with
Emacs&#039;s documentation for the variable 
<SPAN class=compcode>c-offsets-alist</SPAN>.
Such a function can provide near infinite control over all permutations of a
given syntactic element. The default comment indentation data are functions,
which is how such great comment indentations are made available.
</FONT></P><P><FONT size=2>Now
that you have defined your own indentation style mode, you should apply it to
all files that you edit so that you do not have to use the set style command 
<SPAN class=compcode>C-c
.
</SPAN>
every time. To do this, set the variable 
<SPAN class=compcode>c-default-style</SPAN>
to the string 
<SPAN class=compcode>my-style</SPAN>
in<A name="Index7223"></A><A name="Index7224"></A><A name="Index7225"></A><A name="Index7226"></A>
your 
<SPAN class=compcode>.emacs</SPAN>
file. The code would look like this:
</FONT></P>

<PRE class="compcode"><FONT size=3>
<SPAN class=compcode>(setq c-default-style &quot;my-style&quot;)</SPAN>
</FONT></PRE>
<A name="Heading367"></A><H3>
Proactive
Editing
</H3>
<P><FONT size=2>The
C-based language editing mode provides some additional editing modes beyond
most other language editing modes. These include
</FONT></P>
<UL>
<LI><P><FONT size=2>		Auto
new line
</FONT></P></LI><P></P><LI><P><FONT size=2>		Hungry
delete
</FONT></P></LI></UL><P></P><P><FONT size=2>Each
of these can be toggled easily or have their behaviors modified slightly. What
both of these modes do is increase the amount of stuff Emacs does in certain
situations. Auto new line <A name="Index7227"></A><A name="Index7228"></A><A name="Index7229"></A><A name="Index7230"></A><A name="Index7231"></A><A name="Index7232"></A>automatically
adds extra white space in certain situations, and hungry delete <A name="Index7233"></A><A name="Index7234"></A><A name="Index7235"></A><A name="Index7236"></A><A name="Index7237"></A><A name="Index7238"></A>performs
extra white space deletions.
</FONT></P><P><FONT size=2>Auto
new line mode<A name="Index7239"></A><A name="Index7240"></A><A name="Index7241"></A><A name="Index7242"></A><A name="Index7243"></A><A name="Index7244"></A>
is toggled with the key sequence 
<SPAN class=compcode>C-c
C-a</SPAN>.
When active, the major-mode string changes to include 
<SPAN class=compcode>/a</SPAN>.
Thus, if you are editing C, it reads 
<SPAN class=compcode>C/a</SPAN>;
if you are editing Java, it says 
<SPAN class=compcode>Java/a</SPAN>.
It could say 
<SPAN class=compcode>/ha</SPAN>
instead, and this means that auto new line mode is on at the same time as
hungry delete mode.
</FONT></P>
<P><FONT size=2>When active, auto new line changes the behavior of the brace keys, 
  semicolon, and comma. Whenever one of these is entered, Emacs adds a new line 
  after it when appropriate. You can change the occurrences when this happens 
  by examining the variable <SPAN class=compcode>c-hanging-semi&amp;comma-criteria</SPAN>. 
  To do this you must be prepared to write a function that analyzes the current 
  location and returns <SPAN class=compcode>&#039;stop</SPAN> to prevent a new 
  line from being added or a non-nil value to cause a new line to appear. Please 
  see <A href="emacs206.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs206.htm">Hour 24</A> for additional details on how to accomplish<A name="Index7245"></A><A name="Index7246"></A><A name="Index7247"></A><A name="Index7248"></A><A name="Index7249"></A><A name="Index7250"></A> 
  this. </FONT></P>
<P><FONT size=2>Hungry
delete <A name="Index7251"></A><A name="Index7252"></A><A name="Index7253"></A><A name="Index7254"></A><A name="Index7255"></A><A name="Index7256"></A>takes
the opposite approach. Where auto new line adds extra carriage returns, hungry
delete removes as much white space as possible. To activate hungry delete, you
can toggle it with 
<SPAN class=compcode>C-c
C-d</SPAN>,
and a 
<SPAN class=compcode>/h</SPAN>
or 
<SPAN class=compcode>/ha</SPAN>
should be added to the mode description. To use hungry delete when it is
active, all you have to do is press the Backspace key, and hungry delete remove
as much white space as possible. White space deleted includes spaces, tab
characters, and new lines. Using hungry delete could prove distracting to new
users, but it can prove valuable in some situations where there is lots of
pesky white space.
</FONT></P><P><FONT size=2>Much
of what hungry delete does can be replicated through use of a few other
built-in commands. For completeness, you can also use the function
just-one-space, which is bound to 
<SPAN class=compcode>M-SPC</SPAN>,
and delete-blank-lines which is bound to 
<SPAN class=compcode>C-x
C-o</SPAN>.
Unlike these functions, however, hungry delete remove all white spaces of<A name="Index7257"></A><A name="Index7258"></A><A name="Index7259"></A><A name="Index7260"></A><A name="Index7261"></A><A name="Index7262"></A>
both types.
</FONT></P><P><FONT size=2>These
two modes complement each other well, so you can toggle them to <A name="Index7263"></A><A name="Index7264"></A><A name="Index7265"></A><A name="Index7266"></A><A name="Index7267"></A><A name="Index7268"></A>both
come on at the same time with 
<SPAN class=compcode>C-c
C-t
</SPAN>
command. When both are active, the mode name will have the string 
<SPAN class=compcode>/ha</SPAN>
appended.
</FONT></P><P><FONT size=2>If
you would like these modes to be automatically activated whenever you enter a
file containing a C-based language, you will need to update your 
<SPAN class=compcode>.emacs</SPAN>
file. To modify what happens when a C language file is loaded, write a function
that turns on these modes. The functions to use are 
<SPAN class=compcode>c-toggle-auto-state</SPAN>,
<SPAN class=compcode>c-toggle-hungry-state</SPAN>,
and 
<SPAN class=compcode>c-toggle-auto-hungry-state</SPAN>.
Each of these functions takes a single numeric argument. To force the mode on,
a 1 is used, and to force it off, a -1 is used; otherwise the mode is toggled.
</FONT></P><P><FONT size=2>You
can do all this with a command in your 
<SPAN class=compcode>.emacs</SPAN>
file that looks like<A name="Index7269"></A><A name="Index7270"></A><A name="Index7271"></A><A name="Index7272"></A><A name="Index7273"></A><A name="Index7274"></A><A name="Index7275"></A><A name="Index7276"></A><A name="Index7277"></A><A name="Index7278"></A><A name="Index7279"></A><A name="Index7280"></A>
this:
</FONT></P>

<PRE class="compcode"><FONT size=3>
<SPAN class=compcode>(add-hook &#039;c-mode-hook (lambda () (c-toggle-auto-hungry-state 1)))</SPAN>
</FONT></PRE>
<P><FONT size=2>Two
packages are available that perform tasks similar to hungry delete, but for any
language mode. One is called 
<SPAN class=compcode>greedy-delete.el</SPAN>,
<A name="Index7281"></A><A name="Index7282"></A>and
the other is<A name="Index7283"></A><A name="Index7284"></A>
<SPAN class=compcode>tinyeat.el</SPAN>.
Please see those files for details on their use.
</FONT></P>
<A name="Heading368"></A><H3>
Comment
Acceleration
</H3>
<P><FONT size=2>Emacs
has several<A name="Index7285"></A><A name="Index7286"></A>
advanced commands that are useful when working with comments. You might have
already noticed that comments in C are indented quite cleverly and wonder what
more there could be. Emacs can manage the following comment basics for you:
</FONT></P>
<UL>
<LI><P><FONT size=2>		Text
filling
</FONT></P></LI><P></P><LI><P><FONT size=2>		Creating
new comments
</FONT></P></LI><P></P><LI><P><FONT size=2>		Removing
comments
</FONT></P></LI></UL><P></P>
<P><FONT size=2>When working <A name="Index7287"></A><A name="Index7288"></A>with 
  large amounts of text in a comment, the built-in fill command seems a good choice, 
  but there is actually a special fill comment command in the C menu which rearranges 
  all the text in a comment so that it neatly fills the space available. This 
  is very much like the fill paragraph command discussed earlier in <A href="emacs098.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs098.htm">Hour 
  12, &quot;Visible Editing Utilities,&quot;</A> but is designed especially for 
  comments. If you do not have access to the menubar, you can invoke this function 
  using the extended command <SPAN class=compcode>c-fill-paragraph</SPAN> like<A name="Index7289"></A><A name="Index7290"></A> 
  this <SPAN class=compcode>M-x c-fill-paragraph RET</SPAN>.</FONT></P>
<P><FONT size=2>Emacs
is also <A name="Index7291"></A><A name="Index7292"></A>expert
at adding new comments. There are two methods for doing this. The first is the
indent-for-comment command which is bound to 
<SPAN class=compcode>M-</SPAN>;.
This is specially designed for dropping a new comment on the right side of the
code. Not only does it move the cursor to a specified column and insert comment
characters, it also takes an existing comment and moves it to the correct
location. Try it out in some code to get the feel for what it does. Notice that
if you use this command on a line with a lone closing brace, the comment
appears directly after the closing brace. If you use this command on a line
containing code, it moves out to some column regardless <A name="Index7293"></A><A name="Index7294"></A>of
the code line length.
</FONT></P><P><FONT size=2>When
indenting<A name="Index7295"></A><A name="Index7296"></A>
comments for code, the location where Emacs places the comment is called the <A name="Index7297"></A><A name="Index7298"></A>comment
column. You can modify this by moving the cursor to the column you want, and
using the set comment column command bound to 
<SPAN class=compcode>C-x
;</SPAN>.
The comment column is similar in nature to the fill column, but is specifically
for your comments.
</FONT></P><P><FONT size=2>You
can set the comment column in your 
<SPAN class=compcode>.emacs</SPAN>
file with a command like this:
</FONT></P>

<PRE class="compcode"><FONT size=3>
<SPAN class=compcode>(setq-default comment-column 70)</SPAN>
</FONT></PRE>
<P><FONT size=2>Here
<SPAN class=compcode>70</SPAN>
is the column<A name="Index7299"></A><A name="Index7300"></A>
number for your comments.
</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialgreen">Tip -</B>
Emacs
defaults<A name="Index7301"></A><A name="Index7302"></A>
to a fill column of 70. Classically, printers, terminals, news media, and other
things UNIX default to an 80-column area for fixed width fonts. Although Emacs
lets you do whatever you want, it is advisable for readability purposes to
stick within these <A name="Index7303"></A><A name="Index7304"></A>bounds.</FONT></P></TD></TR></TABLE><BR>
<P><FONT size=2>Emacs
also <A name="Index7305"></A><A name="Index7306"></A>has
some comment commands for dealing with regions of code. The comment region
command works in all language modes and has some clever properties. The need to
comment out a region of code in C might seem unnecessary with preprocessor
directives, but Emacs makes it easy: Mark the region you need commented out and
use the comment region command bound to 
<SPAN class=compcode>C-c
C-c</SPAN>.
Every line in C gets surrounded with its own 
<SPAN class=compcode>/*</SPAN>
and 
<SPAN class=compcode>*/</SPAN>
characters. In C++ and Java, each line is started with the 
<SPAN class=compcode>//</SPAN>
comment<A name="Index7307"></A><A name="Index7308"></A>
start.
</FONT></P>
<P><FONT size=2>If you want to remove <A name="Index7309"></A><A name="Index7310"></A>the 
  comment characters from your code in the future, you are in luck. Instead of 
  having to remove all those characters yourself, you can pass the universal argument 
  (with <SPAN class=compcode>C-u</SPAN>) to the comment region command with <SPAN class=compcode>C-u 
  C-c C-c</SPAN>Sand have all those <A name="Index7311"></A><A name="Index7312"></A>comment 
  characters removed. </FONT></P>
<TABLE border="0" width="99%" cellspacing="0" cellpadding="3">
  <TR> 
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif"  bgcolor="#666699"> 
      <P> <FONT color="#FFFFFF"><B>Sams Teach Yourself Emacs<FONT size="1"></FONT> 
        in 24 Hours</B> </FONT></P>
    </TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699"><FONT size="2"><IMG src="../style/dot.gif" tppabs="http://freebooks.by.ru/view/style/dot.gif" width="10" height="1"></FONT></TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699" nowrap align="right"> 
      <P><A href="index.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/index.htm"><FONT size="2" color="#FFFFFF">Contents</FONT></A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="bkindex.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/bkindex.htm"><FONT size="2" color="#FFFFFF">Index</FONT></A></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#AAAAAA" height="16"> 
      <P><FONT size="2">Hour 18: Editing C, C++, and Java Files</FONT></P>
    </TD>
    <TD bgcolor="#AAAAAA" height="16"><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
    <TD bgcolor="#AAAAAA" height="16" align="right" nowrap> 
      <P><FONT size="2"><A href="emacs147.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs147.htm"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Hour</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs165.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs165.htm">Next 
        Hour<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#DDDDDD"> 
      <TABLE border="0" cellspacing="0" cellpadding="0" dwcopytype="CopyTableRow">
        <TR valign="top"> 
          <TD> 
            <P></P>
            <P><FONT size="2">Sections in this Hour:</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs156.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs156.htm#c1">Advanced 
              C-Based Language Editing</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs160.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs160.htm">File and 
              Tag Browsing</A> </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1">Automatic Indentation</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs161.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs161.htm">Summary</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs158.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs158.htm">Navigating 
              C Preprocessor Directives</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs162.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs162.htm">Q&amp;A</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs159.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs159.htm">Viewing 
              Code with Expanded Macros</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs163.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs163.htm">Exercises</A> 
              </FONT></P>
          </TD>
        </TR>
      </TABLE>
    </TD>
    <TD bgcolor="#DDDDDD">&nbsp;</TD>
    <TD bgcolor="#DDDDDD" align="right" nowrap valign="bottom"> 
      <P class="navigation"><FONT size="2"><A href="emacs156.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs156.htm#c1"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Section</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs158.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs158.htm">Next 
        Section<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
</TABLE>
<P class="copyright"><FONT size=2>&#169; Copyright Macmillan USA. All rights reserved.</FONT> 
</P>
</BODY>

</HTML>
