<html><!-- строчка рекламы by.ru -->
<script language="JavaScript" type="text/javascript" src="../../../more.by.ru/up/up.js-882754240" tppabs="http://more.by.ru/up/up.js?882754240"></script>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<!--
This document was converted from RTF source: 
By rtftohtml 4.17
See http://www.sunpack.com/RTF
Filename:HardDrive:Desktop Folder:0672315947:emacs.rtf
Application Directory:HardDrive:Desktop Folders:Converters:ERL-SEU(4.17):r2h
Subject:
Author:enduser
Operator:End User
Document Comments:
Version Comments:
Comments:
Keywords:
Translation Date:08/11/1999
Translation Time:22:05:11
Translation Platform:MacOS
Number of Output files:226
This File:HardDrive:Desktop Folder:0672315947:emacs167.htm
SplitDepth=2
SkipNavPanel=1
SkipLeadingToc=0
SkipTrailingToc=1
GenContents=1
GenFrames=0
GenIndex=1
-->
<HEAD lang="en"><LINK rel="stylesheet" href="graphics/pkbstyle.css" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/pkbstyle.css">
<META NAME="CATEGORY" CONTENT="0672315947">
<META NAME="BOOKTITLE" CONTENT="Sams Teach Yourself Emacs in 24 Hours">
<TITLE>Hour 19: Programming Utilities: Debugging Programs</TITLE>




<!--Begin Popup Script-->
<SCRIPT LANGUAGE="JavaScript">
<!--
function popUp(pPage) {
 figLoc = '' + document.location;
 if (figLoc.indexOf('/') == -1 && figLoc.indexOf('\\') >= 0) {
   slash = '\\';
 } else {
   slash = '/';
 }
 openLoc = figLoc.substring(0, figLoc.lastIndexOf(slash) + 1);
 while (pPage.substring(0,3) == '../') {
   openLoc = openLoc.substring(0, openLoc.lastIndexOf(slash, openLoc.length - 2) + 1);
   pPage = pPage.substring(3, pPage.length + 1);
 }
 popUpWin = window.open('','popWin','resizable=1,scrollbars=1,location=0,toolbar=0,width=525,height=394');
 figDoc = popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + openLoc + pPage + '">';
 zhtm += '<P><B>' + pPage.substring(pPage.lastIndexOf('/') + 1, pPage.length) + '</B> ';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
}
// modified 3.1.99 RWE v4.1 -->
</SCRIPT>

<!--End Popup Script--></HEAD>

<BODY bgcolor=#FFFFFF >
<TABLE border="0" width="99%" cellspacing="0" cellpadding="3">
  <TR> 
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif"  bgcolor="#666699"> 
      <P> <FONT color="#FFFFFF"><B>Sams Teach Yourself Emacs<FONT size="1"></FONT> 
        in 24 Hours</B> </FONT></P>
    </TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699"><FONT size="2"><IMG src="../style/dot.gif" tppabs="http://freebooks.by.ru/view/style/dot.gif" width="10" height="1"></FONT></TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699" nowrap align="right"> 
      <P><A href="index.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/index.htm"><FONT size="2" color="#FFFFFF">Contents</FONT></A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="bkindex.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/bkindex.htm"><FONT size="2" color="#FFFFFF">Index</FONT></A></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#AAAAAA" height="16"> 
      <P><FONT size="2">Hour 19: Programming Utilities</FONT></P>
    </TD>
    <TD bgcolor="#AAAAAA" height="16"><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
    <TD bgcolor="#AAAAAA" height="16" align="right" nowrap> 
      <P><FONT size="2"><A href="emacs156.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs156.htm"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Hour</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs172.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs172.htm">Next 
        Hour<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#DDDDDD"> 
      <TABLE border="0" cellspacing="0" cellpadding="0" dwcopytype="CopyTableRow">
        <TR valign="top"> 
          <TD> 
            <P></P>
            <P><FONT size="2">Sections in this Hour:</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs165.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs165.htm#c1">Version 
              Control Systems</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs168.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs168.htm">Summary</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs166.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs166.htm">Compiling 
              Programs</A></FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs169.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs169.htm">Q&amp;A</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1">Debugging Programs </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs170.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs170.htm">Exercises</A> 
              </FONT></P>
          </TD>
        </TR>
      </TABLE>
    </TD>
    <TD bgcolor="#DDDDDD">&nbsp;</TD>
    <TD bgcolor="#DDDDDD" align="right" nowrap valign="bottom"> 
      <P class="navigation"><FONT size="2"><A href="emacs166.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs166.htm"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Section</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs168.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs168.htm">Next 
        Section<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
</TABLE>
<H2><A name="c1"></A> Debugging Programs </H2>
<P><FONT size=2>After
your program has been compiled, you might find runtime errors or anomalies <A name="Index7716"></A><A name="Index7717"></A><A name="Index7718"></A><A name="Index7719"></A>and
turn immediately to the debugger. All traditional UNIX debuggers are
command-line-based; this makes them difficult to learn at first, but ideal for
running under Emacs. This section assumes that you have at least a basic
understanding of your system&#039;s debugger and the language you are
attempting to debug.
</FONT></P><P><FONT size=2>Emacs
has extensive knowledge of debuggers and the languages with which they work. To
accommodate the vast array of debuggers for everything from C to Perl, a base<A name="Index7720"></A><A name="Index7721"></A><A name="Index7722"></A><A name="Index7723"></A><A name="Index7724"></A>
called the Grand Unified Debugger was written. This provides the baseline for
working with a debugger in Emacs. After you learn the basics of the Grand
Unified Debugger, almost any language or system debugging tool can be used with
ease.
</FONT></P><P><FONT size=2>To
simplify this hour, I&#039;ll give examples that use<A name="Index7725"></A><A name="Index7726"></A><A name="Index7727"></A><A name="Index7728"></A><A name="Index7729"></A>
gdb, the GNU Debugger. This debugger is widely available for almost any
platform, and even has features that were designed especially for use <A name="Index7730"></A><A name="Index7731"></A><A name="Index7732"></A><A name="Index7733"></A><A name="Index7734"></A><A name="Index7735"></A><A name="Index7736"></A><A name="Index7737"></A><A name="Index7738"></A><A name="Index7739"></A>under
the Grand Unified Debugger.
</FONT></P><P><FONT size=2>First,
make sure that you know where the program you want to debug is. Next, you might
want to load a source file for the program so that the Grand Unified Debugger
has a starting point, and so that you can be ready to put in a few break
points. After you&#039;re ready, run one of the many debugger programs. For
this example, the command is 
<SPAN class=compcode>M-x
gdb</SPAN>.
On some commercial UNIX systems, you might be running dbx, sdb, or some other
debugger. For Java, you run jdb, and for Perl, you <A name="Index7740"></A><A name="Index7741"></A><A name="Index7742"></A><A name="Index7743"></A><A name="Index7744"></A><A name="Index7745"></A><A name="Index7746"></A><A name="Index7747"></A><A name="Index7748"></A><A name="Index7749"></A>run
perldb.
</FONT></P><P><FONT size=2>After
you choose your debugger, you are queried for a command line. You can pass any
arguments to the debugger, but usually you just want to enter the name of the
program that you want to debug. Pretend that you&#039;re working on a program
called twiddle, the purpose of which is to adjust bits in a file. Therefore,
you&#039;ll type in 
<SPAN class=compcode>twiddle</SPAN>
at the gdb prompt.
</FONT></P>
<P><FONT size=2>As soon as you press Enter, Emacs runs gdb in a subprocess. This 
  mode is probably familiar to you because it is closely related to Shell mode, 
  which is introduced in <A href="emacs138.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs138.htm">Hour 16</A>. In this case, however, 
  you have a <SPAN class=compcode>(gdb)</SPAN> prompt, and gdb will have reported 
  its success in loading the program and its symbol <A name="Index7750"></A><A name="Index7751"></A><A name="Index7752"></A><A name="Index7753"></A><A name="Index7754"></A><A name="Index7755"></A><A name="Index7756"></A><A name="Index7757"></A><A name="Index7758"></A><A name="Index7759"></A>table.</FONT></P>
<P><FONT size=2>You
probably know that there are usually several ways to do any one thing. To
begin, assume that there is a problem in the function 
<SPAN class=compcode>twiddle_file</SPAN>,
which loops over the file and twiddles its bits. At the 
<SPAN class=compcode>(gdb)</SPAN>
prompt you can type in 
<SPAN class=compcode>break
twi</SPAN>,
where 
<SPAN class=compcode>break</SPAN>
is the command for setting a break point and 
<SPAN class=compcode>twi</SPAN>
is the first few characters of the function name. You can now use Tab
completion to fill out the rest of the function name. This is true for any
command in gdb that accesses a symbol of<A name="Index7760"></A><A name="Index7761"></A><A name="Index7762"></A><A name="Index7763"></A><A name="Index7764"></A><A name="Index7765"></A><A name="Index7766"></A><A name="Index7767"></A><A name="Index7768"></A><A name="Index7769"></A>
any kind, including 
<SPAN class=compcode>print</SPAN>.</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialgreen">Note -</B>
In
dbx, you <A name="Index7770"></A><A name="Index7771"></A><A name="Index7772"></A><A name="Index7773"></A><A name="Index7774"></A>can
set a break point with the 
<SPAN class=compcode>stop
in
</SPAN>
command.
</FONT></P></TD></TR></TABLE><BR>
<P><FONT size=2>Now
you have a break<A name="Index7775"></A><A name="Index7776"></A><A name="Index7777"></A><A name="Index7778"></A><A name="Index7779"></A><A name="Index7780"></A><A name="Index7781"></A><A name="Index7782"></A><A name="Index7783"></A><A name="Index7784"></A>
point in your function. You can now type 
<SPAN class=compcode>run</SPAN>,
followed by any needed parameters, to start your program under the debugger.
When the program reaches 
<SPAN class=compcode>twiddle_file</SPAN>
it stops in the debugger; Emacs shows you 
<SPAN class=compcode>file.c</SPAN>,
which contains the 
<SPAN class=compcode>twiddle_file</SPAN>
function, and an overlay arrow appears next to the beginning of your functions.
</FONT></P><P><FONT size=2>You
can now step through your program using some simple keys, instead of typing in
debugger commands. Emacs knows which command is for which debugger, so you only
have to remember the Emacs key sequence--not the more archaic commands. In
almost all cases, a command has some keystroke associated with it, such as 
<SPAN class=compcode>C-n</SPAN>.
When the current buffer is the GUD buffer, prefix it with 
<SPAN class=compcode>C-c</SPAN>
to run it. If you are in a source file, prefix it<A name="Index7785"></A><A name="Index7786"></A><A name="Index7787"></A><A name="Index7788"></A><A name="Index7789"></A><A name="Index7790"></A><A name="Index7791"></A><A name="Index7792"></A><A name="Index7793"></A><A name="Index7794"></A>
with 
<SPAN class=compcode>C-x
C-a</SPAN>.</FONT></P><P><FONT size=2>To
use the 
<SPAN class=compcode>next</SPAN>
command, which walks over one command, press 
<SPAN class=compcode>C-c
C-n</SPAN>.
To use the 
<SPAN class=compcode>step</SPAN>
command to step into a function, use 
<SPAN class=compcode>C-c
C-s</SPAN>.
In either case, the overlay arrow is updated to the new location regardless of
the file to which you moved. Another big advantage to using these keybindings
is that the 
<SPAN class=compcode>gdb</SPAN>
buffer is not filled up with useless status messages. Instead, that information
is filtered out completely, and the overlay arrow shows you the current state
of the debugger. If your current buffer is the source code and not the debugger
buffer, you can still use the 
<SPAN class=compcode>next</SPAN>
and 
<SPAN class=compcode>step</SPAN>
commands by using the 
<SPAN class=compcode>C-x
C-a
</SPAN>
prefix that was mentioned earlier. Therefore, 
<SPAN class=compcode>C-x
C-a C-n
</SPAN>
executes 
<SPAN class=compcode>next</SPAN>,
and 
<SPAN class=compcode>C-x
C-a C-s
</SPAN>
executes<A name="Index7795"></A><A name="Index7796"></A><A name="Index7797"></A><A name="Index7798"></A><A name="Index7799"></A><A name="Index7800"></A><A name="Index7801"></A><A name="Index7802"></A><A name="Index7803"></A><A name="Index7804"></A>
<SPAN class=compcode>step</SPAN>.</FONT></P>
<P><FONT size=2>You might find that you must step too much in the main loop of 
  this function. If the bug in which you are interested is after this loop, move 
  the cursor to a line of interest, and type <SPAN class=compcode>C-x SPC</SPAN>; 
  a break point is registered for that location. Now type <SPAN class=compcode>C-x 
  C-a C-r </SPAN> to cause the debugger to continue throughout the loop. When 
  the debugger hits the new break point, it stops and updates the source buffers. 
  If you want to get rid of this break point, you can use the <SPAN class=compcode>C-x 
  C-a C-d </SPAN> command to remove it. </FONT></P>
<P><FONT size=2>Now
that you are here, you might be interested to know what the values of some
variables are. Did the file pointer get cleared correctly? How many characters
have been scanned? Position the cursor over a variable name, and type 
<SPAN class=compcode>C-x
C-a C-p</SPAN>.
This prints out the value of the item under the cursor. In 
<SPAN class=compcode>C</SPAN>,
it is even smart enough to pick up full structure elements or function <A name="Index7805"></A><A name="Index7806"></A><A name="Index7807"></A><A name="Index7808"></A><A name="Index7809"></A><A name="Index7810"></A><A name="Index7811"></A><A name="Index7812"></A><A name="Index7813"></A><A name="Index7814"></A>call
parameters.
</FONT></P>
<P><FONT size=2>In <A href="javascript:popUp('graphics/ch19/19fig01.gif')">Figure 19.1</A>, you can 
  see that the cursor is on the variable <SPAN class=compcode>unchanged</SPAN>. 
  The resulting output of <SPAN class=compcode>C-x C-a C-p</SPAN>, which prints 
  the value under the cursor, is prefixed with <SPAN class=compcode>$1 =</SPAN>, 
  which simply indicates the first item you&#039;ve printed. </FONT></P>
<P class="figcaption"><FONT size=2><B><A href="javascript:popUp('graphics/ch19/19fig01.gif')">Figure 
  19.1</A> </B><BR>
Debugging
<A name="Index7815"></A><A name="Index7816"></A><A name="Index7817"></A><A name="Index7818"></A><A name="Index7819"></A><A name="Index7820"></A><A name="Index7821"></A><A name="Index7822"></A><A name="Index7823"></A><A name="Index7824"></A><SPAN class=compcode>twiddle_file</SPAN>
in  
<SPAN class=compcode>twiddle.c</SPAN>.</FONT></P>
<P><FONT size=2>Are
other stack layers at fault here? You can navigate up and down the stack with
some quick keystrokes. In the 
<SPAN class=compcode>gdb</SPAN>
buffer, use 
<SPAN class=compcode>C-c
&lt;
</SPAN>
to go up the stack and 
<SPAN class=compcode>C-c
&gt;
</SPAN>
to go down. If you are still in the source buffer, use 
<SPAN class=compcode>C-x
C-a &lt;
</SPAN>
and 
<SPAN class=compcode>C-x
C-a &gt;
</SPAN>
to move up and down, respectively. After you&#039;ve switched to that new stack
frame, you can use the 
<SPAN class=compcode>print</SPAN>
command that you learned earlier to examine the variables in this stack frame<A name="Index7825"></A><A name="Index7826"></A><A name="Index7827"></A><A name="Index7828"></A><A name="Index7829"></A><A name="Index7830"></A><A name="Index7831"></A><A name="Index7832"></A><A name="Index7833"></A><A name="Index7834"></A>
as well.
</FONT></P><P><FONT size=2>It
is obvious that all the basics of the debugger are covered with simple
keystrokes. Any additional functionality that is provided by a debugger can
still be accessed by just typing in the desired command as if you were on the
command line, and not in Emacs at all. If any command you enter changes the
current state of the stack, Emacs picks up on  it and adjusts the currently
displayed buffers to make sure that the area of interest is  visible.
</FONT></P><P><FONT size=2>Because
the commands you&#039;ve just learned all work by sending a command string to
the debugger and interpreting its output, it&#039;s possible to add new
commands of your own creation if something is not covered by the basics. Doing
so involves the same programmatic features that are used by the individual
debugging<A name="Index7835"></A><A name="Index7836"></A><A name="Index7837"></A><A name="Index7838"></A><A name="Index7839"></A><A name="Index7840"></A><A name="Index7841"></A><A name="Index7842"></A><A name="Index7843"></A><A name="Index7844"></A>
modes such as gdb.
</FONT></P>
<P><FONT size=2>For example, say it is common for you to set watch points in gdb 
  so that you can track changes in variable values. You can do this easily enough 
  by just typing <SPAN class=compcode>watch &lt;<I>variable</I>&gt;</SPAN> at 
  the command line. Because you are in the mood to impress your friends, however, 
  say you want to bind this to a key sequence. This requires some modification 
  to your <SPAN class=compcode>.emacs</SPAN> file. First, you know that you want 
  to add a hook for gdb to add this binding. Next, you need to understand the 
  Lisp function <SPAN class=compcode>gud-def</SPAN>. This function takes four 
  arguments, starting with the name that you want to give the Lisp function, followed 
  by the string that is sent to the debugger, the keybinding, and some documentation. 
  Call your function <SPAN class=compcode>my-watch</SPAN>; the command is <SPAN class=compcode>watch 
  &lt;<I>variable</I>&gt;</SPAN>; and the key binding<A name="Index7845"></A><A name="Index7846"></A><A name="Index7847"></A><A name="Index7848"></A><A name="Index7849"></A><A name="Index7850"></A><A name="Index7851"></A><A name="Index7852"></A><A name="Index7853"></A><A name="Index7854"></A> 
  is <SPAN class=compcode>C-w</SPAN>.</FONT></P>
<P><FONT size=2>When
you specify 
<SPAN class=compcode>C-w</SPAN>
as your key sequence, it really means that in the 
<SPAN class=compcode>gud</SPAN>
buffer, your new function is accessible through 
<SPAN class=compcode>C-c
C-w
</SPAN>
and from a source buffer as 
<SPAN class=compcode>C-x
C-a C-w</SPAN>.</FONT></P><P><FONT size=2>When
you are specifying the command to send to the debugger, specify that your
preference is for the 
<SPAN class=compcode>&lt;<I>variable</I>&gt;</SPAN>
part of your command to be automatically filled in with the symbol under the
cursor. To do this, replace 
<SPAN class=compcode>&lt;<I>variable</I>&gt;</SPAN>
with 
<SPAN class=compcode>%e</SPAN>.
<SPAN class=compcode>%e</SPAN>
is automatically replaced by GUD with the expression found under the cursor.
Some other symbols  that you can add to your string include 
<SPAN class=compcode>%f</SPAN>
for the filename, and 
<SPAN class=compcode>%l</SPAN>
for the current line number.
</FONT></P><P><FONT size=2>Now
put all this information together to customize the gdb mode for all future
sessions. Your 
<SPAN class=compcode>.emacs</SPAN>
now contains the following <A name="Index7855"></A><A name="Index7856"></A><A name="Index7857"></A><A name="Index7858"></A><A name="Index7859"></A><A name="Index7860"></A><A name="Index7861"></A><A name="Index7862"></A><A name="Index7863"></A><A name="Index7864"></A>information:</FONT></P>

<PRE class="compcode"><FONT size=3>
<SPAN class=compcode>(add-hook &#039;gdb-mode-hook </SPAN>
<SPAN class=compcode>                 (lambda () </SPAN>
<SPAN class=compcode>                  (gud-def my-watch &quot;watch %e&quot; </SPAN>
<SPAN class=compcode>                           &quot;\C-w&quot; &quot;Watch my variables.&quot;) </SPAN>
<SPAN class=compcode>                   ) </SPAN>
<SPAN class=compcode> ) </SPAN>
</FONT></PRE>
<P><FONT size=2>After this is set up and gdb is restarted, you can use <SPAN class=compcode>C-x 
  C-a C-w</SPAN>.in your source buffer to set watch points on the expression 
  on which<A name="Index7865"></A><A name="Index7866"></A><A name="Index7867"></A><A name="Index7868"></A><A name="Index7869"></A><A name="Index7870"></A><A name="Index7871"></A><A name="Index7872"></A><A name="Index7873"></A><A name="Index7874"></A> 
  the cursor sits. </FONT></P>
<TABLE border="0" width="99%" cellspacing="0" cellpadding="3">
  <TR> 
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif"  bgcolor="#666699"> 
      <P> <FONT color="#FFFFFF"><B>Sams Teach Yourself Emacs<FONT size="1"></FONT> 
        in 24 Hours</B> </FONT></P>
    </TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699"><FONT size="2"><IMG src="../style/dot.gif" tppabs="http://freebooks.by.ru/view/style/dot.gif" width="10" height="1"></FONT></TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699" nowrap align="right"> 
      <P><A href="index.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/index.htm"><FONT size="2" color="#FFFFFF">Contents</FONT></A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="bkindex.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/bkindex.htm"><FONT size="2" color="#FFFFFF">Index</FONT></A></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#AAAAAA" height="16"> 
      <P><FONT size="2">Hour 19: Programming Utilities</FONT></P>
    </TD>
    <TD bgcolor="#AAAAAA" height="16"><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
    <TD bgcolor="#AAAAAA" height="16" align="right" nowrap> 
      <P><FONT size="2"><A href="emacs156.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs156.htm"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Hour</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs172.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs172.htm">Next 
        Hour<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#DDDDDD"> 
      <TABLE border="0" cellspacing="0" cellpadding="0" dwcopytype="CopyTableRow">
        <TR valign="top"> 
          <TD> 
            <P></P>
            <P><FONT size="2">Sections in this Hour:</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs165.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs165.htm#c1">Version 
              Control Systems</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs168.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs168.htm">Summary</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs166.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs166.htm">Compiling 
              Programs</A></FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs169.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs169.htm">Q&amp;A</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1">Debugging Programs </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs170.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs170.htm">Exercises</A> 
              </FONT></P>
          </TD>
        </TR>
      </TABLE>
    </TD>
    <TD bgcolor="#DDDDDD">&nbsp;</TD>
    <TD bgcolor="#DDDDDD" align="right" nowrap valign="bottom"> 
      <P class="navigation"><FONT size="2"><A href="emacs166.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs166.htm"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Section</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs168.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs168.htm">Next 
        Section<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
</TABLE>
<P class="copyright"><FONT size=2>&#169; Copyright Macmillan USA. All rights reserved.</FONT> 
</P>
</BODY>

</HTML>
