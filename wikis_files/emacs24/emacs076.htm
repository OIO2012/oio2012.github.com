<html><!-- строчка рекламы by.ru -->
<script language="JavaScript" type="text/javascript" src="../../../more.by.ru/up/up.js-556581568" tppabs="http://more.by.ru/up/up.js?556581568"></script>

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<!--
This document was converted from RTF source: 
By rtftohtml 4.17
See http://www.sunpack.com/RTF
Filename:HardDrive:Desktop Folder:0672315947:emacs.rtf
Application Directory:HardDrive:Desktop Folders:Converters:ERL-SEU(4.17):r2h
Subject:
Author:enduser
Operator:End User
Document Comments:
Version Comments:
Comments:
Keywords:
Translation Date:08/11/1999
Translation Time:22:04:14
Translation Platform:MacOS
Number of Output files:226
This File:HardDrive:Desktop Folder:0672315947:emacs076.htm
SplitDepth=2
SkipNavPanel=1
SkipLeadingToc=0
SkipTrailingToc=1
GenContents=1
GenFrames=0
GenIndex=1
-->
<HEAD lang="en"><LINK rel="stylesheet" href="graphics/pkbstyle.css" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/pkbstyle.css">
<META NAME="CATEGORY" CONTENT="0672315947">
<META NAME="BOOKTITLE" CONTENT="Sams Teach Yourself Emacs in 24 Hours">
<TITLE>Hour 9: Regular Expressions: Regular Expressions--Basics</TITLE>




<!--Begin Popup Script-->
<SCRIPT LANGUAGE="JavaScript">
<!--
function popUp(pPage) {
 figLoc = '' + document.location;
 if (figLoc.indexOf('/') == -1 && figLoc.indexOf('\\') >= 0) {
   slash = '\\';
 } else {
   slash = '/';
 }
 openLoc = figLoc.substring(0, figLoc.lastIndexOf(slash) + 1);
 while (pPage.substring(0,3) == '../') {
   openLoc = openLoc.substring(0, openLoc.lastIndexOf(slash, openLoc.length - 2) + 1);
   pPage = pPage.substring(3, pPage.length + 1);
 }
 popUpWin = window.open('','popWin','resizable=1,scrollbars=1,location=0,toolbar=0,width=525,height=394');
 figDoc = popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + openLoc + pPage + '">';
 zhtm += '<P><B>' + pPage.substring(pPage.lastIndexOf('/') + 1, pPage.length) + '</B> ';
 zhtm += '</BODY></HTML>';
 figDoc.write(zhtm);
 figDoc.close();
}
// modified 3.1.99 RWE v4.1 -->
</SCRIPT>

<!--End Popup Script--></HEAD>

<BODY bgcolor=#FFFFFF >
<TABLE border="0" width="99%" cellspacing="0" cellpadding="3">
  <TR> 
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif"  bgcolor="#666699"> 
      <P> <FONT color="#FFFFFF"><B>Sams Teach Yourself Emacs<FONT size="1"></FONT> 
        in 24 Hours</B> </FONT></P>
    </TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699"><FONT size="2"><IMG src="../style/dot.gif" tppabs="http://freebooks.by.ru/view/style/dot.gif" width="10" height="1"></FONT></TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699" nowrap align="right"> 
      <P><A href="index.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/index.htm"><FONT size="2" color="#FFFFFF">Contents</FONT></A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="bkindex.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/bkindex.htm"><FONT size="2" color="#FFFFFF">Index</FONT></A></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#AAAAAA" height="16"> 
      <P><FONT size="2">Hour 9: Regular Expressions</FONT></P>
    </TD>
    <TD bgcolor="#AAAAAA" height="16"><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
    <TD bgcolor="#AAAAAA" height="16" align="right" nowrap> 
      <P><FONT size="2"><A href="emacs067.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs067.htm"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Hour</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs083.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs083.htm">Next 
        Hour<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#DDDDDD"> 
      <TABLE border="0" cellspacing="0" cellpadding="0" dwcopytype="CopyTableRow">
        <TR valign="top"> 
          <TD> 
            <P></P>
            <P><FONT size="2">Sections in this Hour:</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs075.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs075.htm#c1">Regular 
              Expression Crash Course</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs079.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs079.htm">Summary</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1">Regular Expressions--Basics</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs080.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs080.htm">Q&amp;A</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs077.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs077.htm">Regular 
              Expression Searches</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs081.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs081.htm">Exercises</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs078.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs078.htm">Regular 
              Expression Search-and-Replace</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"> </FONT></P>
          </TD>
        </TR>
      </TABLE>
    </TD>
    <TD bgcolor="#DDDDDD">&nbsp;</TD>
    <TD bgcolor="#DDDDDD" align="right" nowrap valign="bottom"> 
      <P class="navigation"><FONT size="2"><A href="emacs075.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs075.htm#c1"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Section</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs077.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs077.htm">Next 
        Section<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
</TABLE>
<H2><A name="c1"></A> Regular Expressions--Basics </H2>
<TABLE border="0" cellspacing="0" cellpadding="0">
  <TR valign="top"> 
    <TD> 
      <P class="navigation"><FONT size="1"><A href="#Heading202">Repeating Elements</A></FONT></P>
    </TD>
  </TR>
  <TR valign="top"> 
    <TD> 
      <P class="navigation"><FONT size="1"><A href="#Heading203">Combining Regular 
        Expressions</A></FONT></P>
    </TD>
  </TR>
  <TR valign="top"> 
    <TD> 
      <P class="navigation"><FONT size="1"><A href="#Heading204">Character Groups</A></FONT></P>
    </TD>
  </TR>
  <TR valign="top"> 
    <TD> 
      <P class="navigation"><FONT size="1"><A href="#Heading205">Matching Positions</A></FONT></P>
    </TD>
  </TR>
  <TR valign="top"> 
    <TD> 
      <P> 
      <P class="navigation"><FONT size="1"><A href="#Heading206">Regular Expression 
        in Your .emacs File</A></FONT></P>
    </TD>
  </TR>
</TABLE>
<BR>
<P><FONT size=2>In
the previous section you learned enough about regular expressions to use them
as simple patterns. This should be enough in most cases. However at some point
you will get into a situation where you need more power. For this sake, here
comes the whole story about regular expressions and what you can do with them.
</FONT></P><P><FONT size=2>Regular
expressions<A name="Index3589"></A><A name="Index3590"></A>
describe characteristics which must be fulfilled when you, for example, search
for a string. If this sounds abstract for you, please think about how you would
search for words containing exactly eight letters. You would not write down all
possible combinations of eight letters and search for them one at a time, would
you? I guess not; you would most certainly do something a bit smarter. What you
would do is this: 
<I>Search
for words that have the characteristic that they have eight letters
</I>.</FONT></P><P><FONT size=2>Likewise
if you knew that, somewhere in your text, you have a word starting in 
<I>the</I>,
you would not do an ordinary search for 
<I>the</I>,
because this would match all kind of words that contain the substring 
<I>the</I>,
such as 
<I>aesthetic</I>,
<I>farther</I>,
and 
<I>smoothed</I>.
No, you would search for words having the characteristic that they start with the<A name="Index3591"></A><A name="Index3592"></A>
letters 
<I>the</I>.</FONT></P><P><FONT size=2>There
are a number of characters that have special meanings in regular expressions.
These include 
<SPAN class=compcode>$</SPAN>,
<SPAN class=compcode>^</SPAN>,
<SPAN class=compcode>.</SPAN>,
<SPAN class=compcode>*</SPAN>,
<SPAN class=compcode>+</SPAN>,
<SPAN class=compcode>?</SPAN>,
<SPAN class=compcode>[</SPAN>,
<SPAN class=compcode>]</SPAN>,
and 
<SPAN class=compcode>\</SPAN>.
If you want to use one of these characters without its special meaning, you
have to prefix it with a backslash. When you prefix a special character with a
backslash, you are said to 
<I>escape</I>
it. The simplest regular expression is one without any of these special
characters (or with the given characters escaped). Therefore the following
strings are not special regular expressions (that<A name="Index3593"></A><A name="Index3594"></A>
is, they have no other meaning than text):
</FONT></P>
<DIV align="LEFT">
  <TABLE 0>
    <TR valign="TOP"> 
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2> <SPAN class=compcode>Yes it works!</SPAN></FONT></P>
      </TD>
      <TD rowspan=1 width="15">&nbsp;</TD>
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2> This matches the string &quot;Yes it works!&quot; No 
          special characters are in this string. </FONT></P>
      </TD>
    </TR>
    <TR valign="TOP"> 
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2> <SPAN class=compcode>Don&#039;t Leave</SPAN></FONT></P>
      </TD>
      <TD rowspan=1 width="15">&nbsp;</TD>
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2> Again, no special characters. </FONT></P>
      </TD>
    </TR>
    <TR valign="TOP"> 
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2> <SPAN class=compcode>100\$\+200\$=\?</SPAN></FONT></P>
      </TD>
      <TD rowspan=1 width="15">&nbsp;</TD>
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2> This matches the string <SPAN class=compcode>100$+200$=?</SPAN>. 
          All the special characters (<SPAN class=compcode>$</SPAN>, <SPAN class=compcode>+</SPAN>, 
          and <SPAN class=compcode>?</SPAN>) have been escaped. </FONT></P>
      </TD>
    </TR>
    <TR valign="TOP"> 
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2> <SPAN class=compcode>Enough\.</SPAN></FONT></P>
      </TD>
      <TD rowspan=1 width="15">&nbsp;</TD>
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2> This matches the string <SPAN class=compcode>Enough.</SPAN>. 
          The dot, which has a special regular expression meaning, has been escaped. 
          </FONT></P>
      </TD>
    </TR>
    <TR valign="TOP"> 
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2><SPAN class=compcode>\\\$</SPAN></FONT></P>
      </TD>
      <TD rowspan=1 width="15">&nbsp;</TD>
      <TD colspan=1 rowspan=1 valign="TOP"> 
        <P><FONT size=2>This matches the text <SPAN class=compcode>\$</SPAN>. 
          First, the backslash has been escaped. Next, the dollar sign has been 
          escaped, which result <A name="Index3595"></A><A name="Index3596"></A>in 
          a backslash and a dollar sign. </FONT></P>
      </TD>
    </TR>
  </TABLE>
</DIV>
<A name="Heading202"></A>
<H3>
Repeating
Elements
</H3>
<P><FONT size=2>Regular expressions <A name="Index3597"></A><A name="Index3598"></A>are 
  built using a number of special characters that add special meaning to the string. 
  The first element of these characters is the asterisk (<SPAN class=compcode>*</SPAN>). 
  This one is not new to you if you know it from the shell, but be warned it is 
  not entirely like the asterisk from the shell. </FONT></P>
<P><FONT size=2>The asterisk must be used with another regular expression and 
  means repeat the other regular expression a number of times (even zero times). 
  The string <SPAN class=compcode>a</SPAN> is a regular expression that matches 
  a single <SPAN class=compcode>a</SPAN>. The regular expression <SPAN class=compcode>a*</SPAN> 
  matches, therefore, the empty string, the string <SPAN class=compcode>a</SPAN>, 
  the<A name="Index3599"></A><A name="Index3600"></A> string <SPAN class=compcode>aa</SPAN>, 
  the string <SPAN class=compcode>aaa</SPAN>, and so on. </FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD">
      <P><FONT size=2><B class="specialgreen">Note -</B> The asterisk used in 
        patterns means any characters, whereas the asterisk used in regular expressions 
        means repeat the previous regular expression a number of times. The regular 
        expression <SPAN class=compcode>.*</SPAN> has the same meaning as a single 
        asterisk in patterns. </FONT></P>
    </TD></TR></TABLE><BR>
<P><FONT size=2>Two
other special characters exist that are similar to the asterisk:
</FONT></P>
<UL>
<LI><P><FONT size=2>		<SPAN class=compcode>+</SPAN>--The
plus<A name="Index3601"></A><A name="Index3602"></A>
sign means repeat the previous regular expression a number of times, but at
least one time. Thus it is equivalent to the asterisk with the exception that
it doesn&#039;t match the empty string. Therefor 
<SPAN class=compcode>a+</SPAN>
matches 
<SPAN class=compcode>a</SPAN>,
<SPAN class=compcode>aa</SPAN>,
<SPAN class=compcode>aaa</SPAN>,
and so on, but 
<I>not</I>
the empty string.
</FONT></P></LI><P></P><LI><P><FONT size=2>		<SPAN class=compcode>?</SPAN>--The
question mark means match the previous regular expression zero or one time.
Therefore 
<SPAN class=compcode>a?</SPAN>
matches the empty string and <A name="Index3603"></A><A name="Index3604"></A>the
string 
<SPAN class=compcode>a</SPAN>.</FONT></P></LI></UL><P></P><A name="Heading203"></A><H3>
Combining
Regular Expressions
</H3>
<P><FONT size=2>Until
now, the <A name="Index3605"></A><A name="Index3606"></A><A name="Index3607"></A>regular
expressions you have seen have been very dull. The reason for this is that you
still haven&#039;t learned how to combine two regular expressions.
</FONT></P><P><FONT size=2>If
you have two regular expressions 
<SPAN class=compcode>A</SPAN>
and 
<SPAN class=compcode>B</SPAN>,
the concatenated regular expression 
<I>AB</I>
means that a given text should match first 
<SPAN class=compcode>A</SPAN>
then 
<SPAN class=compcode>B</SPAN>.
If you, for example, have a regular expression 
<SPAN class=compcode>a*</SPAN>,
this regular expression matches a number of 
<SPAN class=compcode>a</SPAN>&#039;s,
and likewise 
<SPAN class=compcode>b*</SPAN>
matches a number of 
<SPAN class=compcode>b</SPAN>&#039;s.
Therefore 
<SPAN class=compcode>a*b*</SPAN>
would match every string which starts with any number of 
<SPAN class=compcode>a</SPAN>&#039;s,
and ends in any number of 
<SPAN class=compcode>b</SPAN>&#039;s,
with nothing <A name="Index3608"></A><A name="Index3609"></A><A name="Index3610"></A>in
between: 
<SPAN class=compcode>ab</SPAN>,
<SPAN class=compcode>aaa</SPAN>,
<SPAN class=compcode>bbb</SPAN>,
<SPAN class=compcode>aabbbbbb</SPAN>,
and so on.
</FONT></P>
<P><FONT size=2>You can likewise build a regular expression that matches either 
  <SPAN class=compcode>A</SPAN> or <SPAN class=compcode>B</SPAN>, namely the expression 
  <SPAN class=compcode>A\|B</SPAN> (that is the regular expression <SPAN class=compcode>A</SPAN> 
  concatenated with a backslash, and a pipe symbol concatenated with the regular 
  expression <SPAN class=compcode>B</SPAN>). The regular expression <SPAN class=compcode>a*\|b*</SPAN> 
  matches therefore a number of <SPAN class=compcode>a</SPAN>&#039;s or a number 
  of <SPAN class=compcode>b</SPAN>&#039;s but not mixed: <SPAN class=compcode>a</SPAN>, 
  <SPAN class=compcode>b</SPAN>, <SPAN class=compcode>aa</SPAN>, <SPAN class=compcode>bb</SPAN>, 
  and so on. </FONT></P>
<P><FONT size=2>You might now very well ask, How do I create a regular expression 
  that matches a number of <SPAN class=compcode>a</SPAN>&#039;s and <SPAN class=compcode>b</SPAN>&#039;s 
  mixed together, as in the example <SPAN class=compcode>baaabbaabb</SPAN>? The 
  regular expression <SPAN class=compcode>a\|b</SPAN> matches an <SPAN class=compcode>a</SPAN> 
  or a <SPAN class=compcode>b</SPAN>. Does <SPAN class=compcode>a\|b*</SPAN> match 
  a number of <SPAN class=compcode>a</SPAN>&#039;s mixed with <SPAN class=compcode>b</SPAN>&#039;s, 
  then? If you think so, please let me know what a regular expression, which matches 
  one <SPAN class=compcode>a</SPAN> or a number of <SPAN class=compcode>b</SPAN>&#039;s 
  look like. (You will most likely suggest the same<A name="Index3611"></A><A name="Index3612"></A><A name="Index3613"></A> 
  regular expression, namely <SPAN class=compcode>a\|b*</SPAN>.)</FONT></P>
<P><FONT size=2>If you are a computer geek you should immediately recognize the 
  preceding problem as a matter of precedence. If on the other hand you are not 
  a computer geek, I can tell you that the preceding problem is equivalent to 
  the problem of telling whether the mathematical expression <SPAN class=compcode>3 
  + 4 * 5 </SPAN> gives the result 23 or 35 (The result is 23!). In mathematics 
  the rule is that you must evaluate <SPAN class=compcode>*</SPAN> before you 
  evaluate <SPAN class=compcode>+</SPAN>. Thus a subresult in the expression preceding 
  is <SPAN class=compcode>3 + 20 </SPAN> (and not <SPAN class=compcode>7 * 5</SPAN>. 
  If you are bad at remembering which one is evaluated first, you can always use 
  parentheses to indicate your intention. Thus <SPAN class=compcode>3 + 4 * 5 
  </SPAN> is equal to <SPAN class=compcode>3 + (4 * 5)</SPAN>. Likewise in regular 
  expressions, you can use parentheses to indicate which group a given operator 
  works on. Grouping in regular <A name="Index3614"></A><A name="Index3615"></A><A name="Index3616"></A>expressions 
  is done by surrounding the group with <SPAN class=compcode>\(</SPAN> and <SPAN class=compcode>\)</SPAN>.</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialgreen">Note -</B>
To
avoid using too many backslashes and having too many special symbols, grouping
using parentheses in regular expressions <A name="Index3617"></A><A name="Index3618"></A><A name="Index3619"></A>is
done using 
<SPAN class=compcode>\(...\)</SPAN>
instead of 
<SPAN class=compcode>(...)</SPAN>
as in math. Had this not been the case, then you would have the parentheses as
special symbols too.
</FONT></P></TD></TR></TABLE><BR>
<P><FONT size=2>The
regular expression 
<SPAN class=compcode>\(a\|b\)*</SPAN>,
therefore, means a number of elements <A name="Index3620"></A><A name="Index3621"></A><A name="Index3622"></A>that
can be matched by the regular expression 
<SPAN class=compcode>a\|b</SPAN>.</FONT></P><P><FONT size=2>It
is beyond the scope of this book to tell you the whole truth about the rules
for when it is necessary to use parentheses and when it is not. A general rule
of thumb that you can use is that 
<SPAN class=compcode>*</SPAN>,
<SPAN class=compcode>+</SPAN>,
and 
<SPAN class=compcode>?</SPAN>
need their arguments enclosed in parentheses unless the argument is a single
letter. Thus it is not necessary to use parentheses in 
<SPAN class=compcode>a*</SPAN>,
but if you need to match a number of 
<SPAN class=compcode>abc</SPAN>&#039;s--that
is, 
<SPAN class=compcode>abc</SPAN>,
<SPAN class=compcode>abcabc</SPAN>,
<SPAN class=compcode>abcabcabc</SPAN>,
and so on--you need  parentheses, as in the regular expression 
<SPAN class=compcode>\(abc\)+</SPAN>.
If it said 
<SPAN class=compcode>abc+</SPAN>,
it would mean an 
<SPAN class=compcode>a</SPAN>,
 a 
<SPAN class=compcode>b</SPAN>,
and one or more 
<SPAN class=compcode>c</SPAN>&#039;s.</FONT></P>
<P><FONT size=2>Hey! Now you have in fact learned a lot about regular expressions! 
  Before I continue, <A href="javascript:popUp('graphics/ch09/09fig01.gif')">Figures 9.1</A> and <A href="javascript:popUp('graphics/ch09/09fig02.gif')">9.2</A> 
  show you a few regular expressions together with explanations, so you can get 
  a feel<A name="Index3623"></A><A name="Index3624"></A><A name="Index3625"></A> 
  for it. </FONT></P>
<P class="figcaption"><FONT size=2><B><A href="javascript:popUp('graphics/ch09/09fig01.gif')">Figure 
  9.1</A> </B><BR>
A
regular expression<A name="Index3626"></A><A name="Index3627"></A><A name="Index3628"></A>
that can be used to match section headings in LaTeX. 
</FONT></P>
<P class="figcaption"><FONT size=2><B><A href="javascript:popUp('graphics/ch09/09fig02.gif')">Figure 
  9.2</A> </B><BR>
A
regular expression that can be used to match letters sent to or from a 
<SPAN class=compcode>.com</SPAN>
email <A name="Index3629"></A><A name="Index3630"></A><A name="Index3631"></A>address.</FONT></P>
<P><FONT size=2>All in all, the regular expression in <A href="javascript:popUp('graphics/ch09/09fig02.gif')">Figure 
  9.2</A> matches any text starting with <SPAN class=compcode>From:</SPAN>, <SPAN class=compcode>To:</SPAN>, 
  or <SPAN class=compcode>Sender:</SPAN>, and ending in <SPAN class=compcode>.com</SPAN>, 
  with any text<A name="Index3632"></A><A name="Index3633"></A><A name="Index3634"></A> 
  in between. </FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD">
      <P><FONT size=2><B class="specialgreen">Note -</B> You will later learn 
        how you can use part of a match in replacement text. The text you would 
        use could, for example, be the text matched by <SPAN class=compcode>.*</SPAN> 
        in <A href="javascript:popUp('graphics/ch09/09fig02.gif')">Figure 9.2</A>. </FONT></P>
    </TD></TR></TABLE>
<A name="Heading204"></A>
<H3>
Character
Groups
</H3>
<P><FONT size=2>There
is one final <A name="Index3635"></A><A name="Index3636"></A><A name="Index3637"></A>construct
you have to learn before you know every possible way of constructing text for
matches. That is the characters group.
</FONT></P><P><FONT size=2>If
you know the 
<SPAN class=compcode>[...]</SPAN>
construct from the shell, you are lucky, because that is exactly the same! If
you don&#039;t, keep on reading.
</FONT></P><P><FONT size=2>Character
groups is a way of defining a group of possible characters. The simplest
character group is one where you list a number of characters. An example of
this is 
<SPAN class=compcode>[abcde]</SPAN>.
This group matches any of the<A name="Index3638"></A><A name="Index3639"></A><A name="Index3640"></A>
characters 
<SPAN class=compcode>a</SPAN>,
<SPAN class=compcode>b</SPAN>,
<SPAN class=compcode>c</SPAN>,
<SPAN class=compcode>d</SPAN>,
or 
<SPAN class=compcode>e</SPAN>.</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD">
      <P><FONT size=2><B class="specialgreen">Note -</B> This does not add more 
        power to regular expressions because you simply could have written this 
        as <SPAN class=compcode>\(a\|b\|c\|d\|e\)</SPAN>. It is, however, more 
        convenient. </FONT></P>
    </TD></TR></TABLE><BR>
<P><FONT size=2>Within
character groups, you<A name="Index3641"></A><A name="Index3642"></A><A name="Index3643"></A>
can also define a range of characters, such as 
<SPAN class=compcode>[0-9]</SPAN>,
that match a single digit. Multiple ranges can be specified and mixed with
single letters such as 
<SPAN class=compcode>[a-zA-Z_]</SPAN>,
which matches any letter or an underscore.
</FONT></P><P><FONT size=2>Character
groups can be negated; that is, you can specify a range that it might not
match. To do this, include a caret as the first character after the opening
bracket. An example of this is 
<SPAN class=compcode>[^a-zA-Z_]</SPAN>,
which matches any character that is neither a letter nor an underscore.
</FONT></P><P><FONT size=2>To
use a caret in the group as a character to match, put it somewhere that is not
the first position. To include a dash in the list, put it before the closing
bracket. Finally, to include an ending square bracket, put it next to the
opening one, such as 
<SPAN class=compcode>[]A-Z]</SPAN>,
which matches<A name="Index3644"></A><A name="Index3645"></A><A name="Index3646"></A>
either a closing bracket or a capitalized letter.
</FONT></P>
<P><FONT size=2>The regular expression in <A href="javascript:popUp('graphics/ch09/09fig03.gif')">Figure 
  9.3</A> matches an assignment (or at least part of one) in Pascal. The focus 
  here is that variables in Pascal can include any letter including underscores 
  and numbers, with the exception that<A name="Index3647"></A><A name="Index3648"></A><A name="Index3649"></A> 
  a letter must be the first character of the word. </FONT></P>
<P class="figcaption"><FONT size=2><B><A href="javascript:popUp('graphics/ch09/09fig03.gif')">Figure 
  9.3 </A></B><BR>
A
regular expression that<A name="Index3650"></A><A name="Index3651"></A><A name="Index3652"></A>
matches assignments in Pascal.
</FONT></P>
<A name="Heading205"></A><H3>
Matching
Positions
</H3>
<P><FONT size=2>So
far the regular <A name="Index3653"></A><A name="Index3654"></A>expressions
have been concerned with matching text, but you are also often interested in
specifying an anchor for this text one way or another. The anchors include
</FONT></P>
<UL>
<LI><P><FONT size=2>		Anchoring
to the word boundary.
</FONT></P></LI><P></P><LI><P><FONT size=2>		Anchoring
to the beginning or end of the line or string matched.
</FONT></P></LI></UL><P></P><P><FONT size=2>Some
functions that use regular expressions match the regular expression on a
string, whereas others match regular expression on part of a buffer. Matching a
header field from an email letter can be an example of the first kind, whereas
regular-expression search is an example of the second kind.
</FONT></P><P><FONT size=2>The
characters 
<SPAN class=compcode>^</SPAN>
and 
<SPAN class=compcode>$</SPAN>
anchor the rest of the regular expression, respectively, to the beginning or
the end of the string being matched or, in case the operation works on a
buffer, to line-start or<A name="Index3655"></A><A name="Index3656"></A>
line-end.
</FONT></P><P><FONT size=2>Thus
the regular expression 
<SPAN class=compcode>^a*$</SPAN>
matches a string only if the string contains only 
<SPAN class=compcode>a</SPAN>&#039;s.
If it is used in regular-expression-search, it matches only lines that contain
only 
<SPAN class=compcode>a</SPAN>&#039;s
(or, of course, the empty line).
</FONT></P><P><FONT size=2>There
also are two other regular expressions that match a location, namely 
<SPAN class=compcode>\&lt;</SPAN>
and 
<SPAN class=compcode>\&gt;</SPAN>,
that matches, respectively, the beginning of a word or the end of a word. A
letter of a word is, in this context, defined as the regular expression 
<SPAN class=compcode>[a-zA-Z0-9]</SPAN>
or, in other words, ordinary letters from the alphabet and a digit.
</FONT></P><P><FONT size=2>The
regular expression 
<SPAN class=compcode>\&lt;search</SPAN>
matches any word that starts with 
<I>search</I>,
such as 
<SPAN class=compcode>search</SPAN>,
<SPAN class=compcode>searching</SPAN>,
and 
<SPAN class=compcode>searches</SPAN>.
The regular expression 
<SPAN class=compcode>search\&gt;</SPAN>
matches any words that end in 
<I>search</I>,
such as 
<SPAN class=compcode>search</SPAN>
<A name="Index3657"></A><A name="Index3658"></A>and
<SPAN class=compcode>research</SPAN>.</FONT></P>
<TABLE border="0" width="90%" cellspacing="0" cellpadding="3" align="center"><TR><TD bgcolor="#DDDDDD"><P><FONT size=2><B class="specialgreen">Note -</B>
The
difference between 
<SPAN class=compcode>^</SPAN>
and 
<SPAN class=compcode>\&lt;</SPAN>
is that 
<SPAN class=compcode>^</SPAN>
forces the match to start at the beginning of the line, whereas 
<SPAN class=compcode>\&lt;</SPAN>
forces the match to start at the beginning of a word. The same is true for 
<SPAN class=compcode>$</SPAN>
and 
<SPAN class=compcode>&gt;</SPAN>.</FONT></P></TD></TR></TABLE><BR>
<P><FONT size=2>Finally
there are<A name="Index3659"></A><A name="Index3660"></A>
two expressions that match, respectively, a single word character or a single
nonword character. These are 
<SPAN class=compcode>\w</SPAN>
for word characters and 
<SPAN class=compcode>\W</SPAN>
for nonword  characters. These regular expressions are equal to 
<SPAN class=compcode>[a-zA-Z0-9]</SPAN>
and<A name="Index3661"></A><A name="Index3662"></A>
<SPAN class=compcode>[^a-zA-Z0-9]</SPAN>,
respectively.
</FONT></P>
<A name="Heading206"></A><H3>
Regular
Expression in Your 
<SPAN class=compcode>.emacs</SPAN>
File
</H3>
<P><FONT size=2>Regular
expressions<A name="Index3663"></A><A name="Index3664"></A><A name="Index3665"></A>
can also be used to configure options. An example is the variable
auto-mode-alist, which describes which major mode to load depending on the
filename. The filename is described using a regular expression. These
configurations are often located in your 
<SPAN class=compcode>.emacs</SPAN>
file.
</FONT></P>
<P><FONT size=2>If you insert a regular expression into your <SPAN class=compcode>.emacs</SPAN> 
  file, or if you configure one using the customize library described in <A href="emacs083.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs083.htm">Hour 
  10, &quot;The Emacs Help System and Configuration System,&quot;</A> you need 
  to escape all the backslashes. If you, for example, want to use the regular 
  expression <SPAN class=compcode>^\.emacs$</SPAN> to uniquely describe the file 
  <SPAN class=compcode>.emacs</SPAN>, the regular expression that you must use 
  in the <SPAN class=compcode>.emacs</SPAN> file <A name="Index3666"></A><A name="Index3667"></A><A name="Index3668"></A>is 
  <SPAN class=compcode>^\\.emacs$</SPAN>.</FONT></P>
<P><FONT size=2>An alternative to literally inserting the regular expression into 
  your <SPAN class=compcode>.emacs</SPAN> file is to use the <SPAN class=compcode>sregex.el</SPAN> 
  library located on the CD. This library lets you write your regular expression 
  in a more readable, but <A name="Index3669"></A><A name="Index3670"></A><A name="Index3671"></A>cumbersome, 
  way. </FONT></P>
<TABLE border="0" width="99%" cellspacing="0" cellpadding="3">
  <TR> 
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif"  bgcolor="#666699"> 
      <P> <FONT color="#FFFFFF"><B>Sams Teach Yourself Emacs<FONT size="1"></FONT> 
        in 24 Hours</B> </FONT></P>
    </TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699"><FONT size="2"><IMG src="../style/dot.gif" tppabs="http://freebooks.by.ru/view/style/dot.gif" width="10" height="1"></FONT></TD>
    <TD background="graphics/blstrbkg.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/blstrbkg.gif" bgcolor="#666699" nowrap align="right"> 
      <P><A href="index.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/index.htm"><FONT size="2" color="#FFFFFF">Contents</FONT></A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="bkindex.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/bkindex.htm"><FONT size="2" color="#FFFFFF">Index</FONT></A></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#AAAAAA" height="16"> 
      <P><FONT size="2">Hour 9: Regular Expressions</FONT></P>
    </TD>
    <TD bgcolor="#AAAAAA" height="16"><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
    <TD bgcolor="#AAAAAA" height="16" align="right" nowrap> 
      <P><FONT size="2"><A href="emacs067.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs067.htm"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Hour</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs083.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs083.htm">Next 
        Hour<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
  <TR> 
    <TD bgcolor="#DDDDDD"> 
      <TABLE border="0" cellspacing="0" cellpadding="0" dwcopytype="CopyTableRow">
        <TR valign="top"> 
          <TD> 
            <P></P>
            <P><FONT size="2">Sections in this Hour:</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs075.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs075.htm#c1">Regular 
              Expression Crash Course</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs079.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs079.htm">Summary</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1">Regular Expressions--Basics</FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs080.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs080.htm">Q&amp;A</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs077.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs077.htm">Regular 
              Expression Searches</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs081.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs081.htm">Exercises</A> 
              </FONT></P>
          </TD>
        </TR>
        <TR valign="top"> 
          <TD> 
            <P class="navigation"><FONT size="1"><A href="emacs078.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs078.htm">Regular 
              Expression Search-and-Replace</A> </FONT></P>
          </TD>
          <TD><FONT size="2"><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"></FONT></TD>
          <TD> 
            <P class="navigation"><FONT size="1"> </FONT></P>
          </TD>
        </TR>
      </TABLE>
    </TD>
    <TD bgcolor="#DDDDDD">&nbsp;</TD>
    <TD bgcolor="#DDDDDD" align="right" nowrap valign="bottom"> 
      <P class="navigation"><FONT size="2"><A href="emacs075.htm#c1" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs075.htm#c1"><IMG src="graphics/prev-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/prev-on.gif" width="7" height="5" border="0">Previous 
        Section</A><IMG src="graphics/dot.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/dot.gif" width="10" height="1"><A href="emacs077.htm" tppabs="http://freebooks.by.ru/view/EmacsIn24h/emacs077.htm">Next 
        Section<IMG src="graphics/next-on.gif" tppabs="http://freebooks.by.ru/view/EmacsIn24h/graphics/next-on.gif" width="7" height="5" border="0"></A></FONT></P>
    </TD>
  </TR>
</TABLE>
<P class="copyright"><FONT size=2>&#169; Copyright Macmillan USA. All rights reserved.</FONT> 
</P>
</BODY>

</HTML>
